{"version":3,"sources":["src/components/Heading.tsx","src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","src/hooks/useMiningState.tsx","src/screens/SHTMiningScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Border","border","width","backgroundColor","marginTop","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","module","exports","obj","TypeError","useMiningState","EthersContext","provider","signer","address","useState","totalMinedBTC","setTotalMinedBTC","loadingTotalMined","setLoadingTotalMined","btcInpool","setBtcInpool","loadingBTCInpool","setloadingBTCInpool","yourMiningPower","setYourMiningPower","loadingYourMiningPower","setLoadingYourMiningPower","userInfo","setUserInfo","loadingUserInfo","setLoadingUserInfo","useEffect","useAsyncEffect","a","async","fetchTotalMinedRTokenInpool","fetched","rtokenContract","getContract","BBTC","balanceOf","BTCSTFarm","viewUserInfo","getAddress","userInfoInFarm","amnt","amount","lockedAmnt","lockedAmount","ethers","BigNumber","from","add","Mining","state","BtcStillInPool","t","useTranslation","loading","Title","formatBalance","YourMiningPower","goToFarming","number","div","suffix","YourStakingRecord","records","stakeInfo","recordItem","RecordItem","LoadingNumber","Loading","RecordList","renderItem","useCallback","item","key","timeKey","record","data","useMemo","filter","sub","withdrawed","gt","lockedWithdrawed","sort","t1","t2","toNumber","length","paddingVertical","caption","numberOfLines","marginLeft","path","FlatList","keyExtractor","toString","ItemSeparatorComponent","EmptyList","margin","textAlign","freeRemain","lockedRemain","formatTimeKey","ExternalIcon","textDark","isETH","endsWith","constants","AddressZero","window","open","toLowerCase","SHTMiningScreen","totalValue","Screen","Container","BackgroundImage","Content","huge"],"mappings":"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","file":"static/js/10.d0764c33.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\n\nexport interface MiningState {\n    totalMinedBTC:ethers.BigNumber;\n    loadingTotalMined:boolean;\n    btcInpool:ethers.BigNumber;\n    loadingBTCInpool:boolean;\n    yourMiningPower:ethers.BigNumber;\n    loadingYourMiningPower:boolean; \n    userInfo:MiningUserInfo;\n    loadingUserInfo:boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMiningState = () => {\n    const { provider, signer, address } = useContext(EthersContext);\n\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    \n    const [btcInpool,setBtcInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n\n    const [yourMiningPower,setYourMiningPower] = useState<ethers.BigNumber>();\n    const [loadingYourMiningPower,setLoadingYourMiningPower] = useState(true);\n    \n    const [userInfo,setUserInfo] = useState<MiningUserInfo>();\n    const [loadingUserInfo,setLoadingUserInfo] = useState(true);\n\n    useEffect(() => {\n        setTotalMinedBTC(undefined);\n        setLoadingTotalMined(true);\n        setBtcInpool(undefined);\n        setloadingBTCInpool(true);\n        setYourMiningPower(undefined);\n        setLoadingYourMiningPower(true);\n        setLoadingUserInfo(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                setBtcInpool(await rtokenContract.balanceOf(BTCSTFarm)); \n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingYourMiningPower(true);\n            setLoadingUserInfo(true);\n            const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n            try{\n                const amnt = (await userInfoInFarm).amount;\n                const lockedAmnt = (await userInfoInFarm).lockedAmount;\n                setYourMiningPower(ethers.BigNumber.from(amnt).add(ethers.BigNumber.from(lockedAmnt)));\n                setUserInfo(await userInfoInFarm);\n            }finally{\n                setLoadingYourMiningPower(false);\n                setLoadingUserInfo(false);\n            }\n        }\n    },[provider,signer]);\n    \n    return {\n        totalMinedBTC,\n        loadingTotalMined,\n        btcInpool,\n        loadingBTCInpool,\n        yourMiningPower,\n        loadingYourMiningPower,\n        userInfo,\n        loadingUserInfo\n    };\n};\n\nexport default useMiningState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\n\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\n\nimport useMiningState, { MiningState } from \"../hooks/useMiningState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance, formatTimeKey } from \"../utils\";\nimport Screen from \"./Screen\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport { MiningSubMenu } from \"../components/web/WebSubMenu\";\n\ninterface StakeRecordItemProps {\n    record: MiningStakeRecord;\n    disabled?: boolean;\n}\nconst SHTMiningScreen = () => {\n    const t = useTranslation();\n    const state = useMiningState();\n    const { } = useContext(EthersContext);\n    const loading = state.loadingTotalMined;\n    const totalValue = state.totalMinedBTC;\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1,fontSize:28 }} />\n                    <Title\n                        text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Mining state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <MiningSubMenu />\n        </Screen>\n    );\n};\n\nconst Mining = ({ state }: { state: MiningState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <BtcStillInPool state={state} />\n            <Border/>\n            <View style={{ height: Spacing.large }} />\n            <YourMiningPower state={state} />\n            <View style={{ height: Spacing.large }} />\n            <YourStakingRecord state={state} />\n        </View>\n    );\n};\n\nconst BtcStillInPool = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    const {} = useContext(EthersContext);\n    const amount = state.btcInpool;\n    const loading = state.loadingBTCInpool;\n    return (\n        <View>\n            <Heading text={t(\"total-btc-still-in-pool\")}/>\n            <Title\n                        text={loading || amount==undefined ? t(\"fetching\") : formatBalance(amount,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\nconst YourMiningPower = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/staking\", \"Stake\");\n    return (\n        <View>\n            <Heading text={t(\"your-mining-power\")} buttonText={t(\"stake\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingYourMiningPower}\n                 number={state.yourMiningPower?.div(ethers.BigNumber.from(10))} suffix={\"TH/s\"} />\n        </View>\n    );\n};\n\nconst YourStakingRecord = ({ state }: { state: MiningState }) => {\n    const t = useTranslation();\n    \n    return (\n        <View>\n            <Heading text={t(\"your-staking-records\")} />\n            {/* @ts-ignore */}\n            <RecordList loading={state.loadingUserInfo} records={state.userInfo?.stakeInfo} recordItem={RecordItem}/>\n        </View>\n    );\n};\n\n\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\nconst RecordList = (props: {\n    loading: boolean;\n    records?: MiningStakeRecord[];\n    recordItem: FC<StakeRecordItemProps>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.timeKey} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            (props.records || [])\n                // @ts-ignore\n                .filter(record => ( record.amount.sub(record.withdrawed).gt(ethers.BigNumber.from(0)) ||\n                        record.lockedAmount.sub(record.lockedWithdrawed).gt(ethers.BigNumber.from(0)) ) )\n                .sort((t1, t2) => (t2.timeKey.toNumber() || 0) - (t1.timeKey.toNumber() || 0)),\n        [props.records]\n    );\n    return props.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex:1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {\"BTCST\"}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"locked\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                <ExternalIcon path={\"/all\"} />\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.timeKey.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"empty-staking-records\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: StakeRecordItemProps) => {\n    const record = props.record;\n    const freeRemain = record.amount.sub(record.withdrawed);\n    const lockedRemain = record.lockedAmount.sub(record.lockedWithdrawed);\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex:1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={props.disabled}>\n                    {freeRemain.gt(BigNumber.from(0)) ? formatBalance(freeRemain || 0,17,2): \"N/A\"}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={props.disabled}>\n                    {lockedRemain.gt(BigNumber.from(0)) ? formatBalance(lockedRemain || 0,17,2): \"N/A\"}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={props.disabled}>\n                    {formatTimeKey(record.timeKey)}\n                </Text>\n            </View>\n            <ExternalIcon path={\"/slot/\" + record.timeKey} />\n        </FlexView>\n    );\n};\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://app.btcst.finance/#/history\" + path.toLowerCase());\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\nexport default SHTMiningScreen;\n"],"sourceRoot":""}