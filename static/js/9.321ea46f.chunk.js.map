{"version":3,"sources":["src/components/Heading.tsx","src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/hooks/useHomeState.tsx","src/screens/SHTHomeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Border","border","width","backgroundColor","marginTop","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","module","exports","obj","TypeError","WBTC","Token","ChainId","MAINNET","DAI","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","WETH","CUSTOM_BASES","address","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","useCallback","currencyA","currencyB","provider","a","async","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","useSDK","getTotalSupply","EthersContext","getTrade","fromToken","toToken","fromAmount","eth","isETH","from","convertToken","to","Currency","amount","CurrencyAmount","ether","toString","TokenAmount","Trade","bestTradeExactIn","maxHops","maxNumResults","getPair","calculateAmountOfLPTokenMinted","toAmount","liquidityToken","totalSupply","minted","getLiquidityMinted","ethers","BigNumber","raw","useHomeState","signer","useState","loadingTotalMined","setLoadingTotalMined","totalMinedBTC","setTotalMinedBTC","totalStakedBTCST","setTotalStakedBTCST","setLoadingTotalStaked","yourBTCInpool","setYourBTCInpool","setloadingBTCInpool","totalMiningPower","setTotalMiningPower","setLoadingTotalMiningPower","useEffect","useAsyncEffect","fetchTotalMinedRTokenInpool","fetched","fetchCurrentTotalStakedSTokenInpool","viewGetTotalRewardBalanceInPool","getAddress","totalSupplyOfSToken","Home","state","TotalStaked","t","useTranslation","goToSwap","loadingTokens","staked","loading","loadingTotalStaked","Title","formatBalance","TotalMiningPower","power","div","number","suffix","YourBalance","goToFarming","loadingBTCInpool","LoadingNumber","Loading","SHTHomeScreen","totalValue","Screen","Container","BackgroundImage","Content","huge"],"mappings":"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","file":"static/js/9.321ea46f.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst WBTC = new Token(ChainId.MAINNET, \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\", 8, \"WBTC\", \"Wrapped BTC\");\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiToken\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], WBTC, DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET], WBTC]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport { Currency, CurrencyAmount, Fetcher, Pair, TokenAmount, Trade } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { convertToken, isETH } from \"../utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { getTotalSupply } = useContext(EthersContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n\n    const getTrade = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            provider: ethers.providers.BaseProvider\n        ) => {\n            if (provider) {\n                const eth = isETH(fromToken);\n                const from = convertToken(fromToken);\n                const to = isETH(toToken) ? Currency.ETHER : convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = eth\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        []\n    );\n\n    const getPair = useCallback(async (fromToken: Token, toToken: Token, provider: ethers.providers.BaseProvider) => {\n        const from = convertToken(fromToken);\n        const to = convertToken(toToken);\n        return await Fetcher.fetchPairData(from, to, provider);\n    }, []);\n\n    const calculateAmountOfLPTokenMinted = async (pair: Pair, fromAmount: TokenAmount, toAmount: TokenAmount) => {\n        const totalSupply = await getTotalSupply(pair.liquidityToken.address);\n        if (totalSupply) {\n            const minted = pair.getLiquidityMinted(\n                new TokenAmount(pair.liquidityToken, totalSupply.toString()),\n                fromAmount,\n                toAmount\n            );\n            return ethers.BigNumber.from(minted.raw.toString());\n        }\n    };\n\n    return {\n        getTrade,\n        getPair,\n        calculateAmountOfLPTokenMinted\n    };\n};\n\nexport default useSDK;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport { totalSupplyOfSToken,fetchTotalMinedRTokenInpool,\n     fetchCurrentTotalStakedSTokenInpool,viewGetTotalRewardBalanceInPool} from \"../utils/api-utils\";\n\nexport interface HomeState {\n    totalMinedBTC:ethers.BigNumber;\n    totalStakedBTCST:ethers.BigNumber;\n    yourBTCInpool:ethers.BigNumber;\n    totalMiningPower:ethers.BigNumber;\n    \n    loadingTotalMined:boolean;\n    loadingTotalStaked:boolean;\n    loadingBTCInpool:boolean;\n    loadingTotalMiningPower:boolean;\n\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHomeState = () => {\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    \n    const { getPair } = useSDK();\n\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    const [yourBTCInpool,setYourBTCInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n    const [totalMiningPower,setTotalMiningPower] = useState<ethers.BigNumber>();\n    const [loadingTotalMiningPower,setLoadingTotalMiningPower] = useState(true);\n    \n\n    useEffect(() => {\n        setTotalMinedBTC(undefined);\n        setTotalStakedBTCST(undefined);\n        setYourBTCInpool(undefined);\n        setTotalMiningPower(undefined);\n\n        setLoadingTotalMined(true);\n        setLoadingTotalStaked(true);\n        setloadingBTCInpool(true);\n        setLoadingTotalMiningPower(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            const fetched = await viewGetTotalRewardBalanceInPool(await signer.getAddress(),provider);\n            try{\n                setYourBTCInpool(await fetched);\n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalMiningPower(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            try{\n                setTotalMiningPower(await fetched);\n            }finally{\n                setLoadingTotalMiningPower(false);\n            }\n        }\n    },[provider,signer]);\n\n\n    // Load Liquidity\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0) {\n    //         setLoadingLPTokens(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyLPTokens(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setLPTokens(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingLPTokens(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens]);\n\n    // Load Farming\n    // useAsyncEffect(async () => {\n    //     const weth = tokens.find(t => isWETH(t));\n    //     if (provider && signer && weth && tokens && tokens.length > 0 && lpTokens) {\n    //         setLoadingPools(true);\n    //         const wethPriceUSD = Fraction.parse(String(await sushiData.weth.price()));\n    //         const fetched = await fetchMyPools(await signer.getAddress(), tokens, provider);\n    //         try {\n    //             setPools(\n    //                 await Promise.all(\n    //                     fetched.map(lpToken => fetchLPTokenWithValue(lpToken, weth, wethPriceUSD, getPair, provider))\n    //                 )\n    //             );\n    //         } finally {\n    //             setLoadingPools(false);\n    //         }\n    //     }\n    // }, [getPair, provider, signer, tokens, lpTokens]);\n\n    return {\n        totalMinedBTC,\n        totalStakedBTCST,\n        yourBTCInpool,\n        totalMiningPower,\n        loadingTotalMined\n    };\n};\n\nexport default useHomeState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenName from \"../components/TokenName\";\nimport TokenPrice from \"../components/TokenPrice\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport TokenValue from \"../components/TokenValue\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useHomeState, { HomeState } from \"../hooks/useHomeState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\ninterface TokenItemProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n}\n\ninterface LPTokenItemProps {\n    token: LPTokenWithValue;\n    disabled?: boolean;\n}\n\nconst SHTHomeScreen = () => {\n    const t = useTranslation();\n    const state = useHomeState();\n    const { } = useContext(EthersContext);\n    const loading = state.loadingTotalMined;\n    const totalValue = state.totalMinedBTC;\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"total-mined\")} style={{ flex: 1,fontSize:28 }} />\n                    <Title\n                        text={loading ||totalValue==undefined ? t(\"fetching\") : formatBalance(totalValue,18,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Home state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\nconst Home = ({ state }: { state: HomeState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <TotalStaked state={state} />\n            <View style={{ height: Spacing.large }} />\n            <TotalMiningPower state={state} />\n            <Border />\n            <View style={{ height: Spacing.large }} />\n            <YourBalance state={state} />\n        </View>\n    );\n};\n\nconst TotalStaked = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const goToSwap = useLinker(\"/staking\", \"Stake\");\n    const staked = state.totalStakedBTCST;\n    const loading = state.loadingTotalStaked;\n    return (\n        <View>\n            <Heading text={t(\"total-staked-btcst\")} buttonText={t(\"stake\")} onPressButton={goToSwap} />\n            <Title\n                        text={loading ||staked==undefined ? t(\"fetching\") : formatBalance(staked,17,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\n\nconst TotalMiningPower = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const loading = state.loadingTotalStaked;\n    const power = state.totalStakedBTCST!=undefined?\n        state.totalStakedBTCST.div(ethers.BigNumber.from(10)):undefined;\n    return (\n        <View>\n            <Heading text={t(\"total-mining-power\")} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={loading} \n                number={power} suffix={\" TH/s\"}/>\n        </View>\n    );\n};\n\nconst YourBalance = ({ state }: { state: HomeState }) => {\n    const t = useTranslation();\n    const goToFarming = useLinker(\"/claim\", \"Mining\");\n    return (\n        <View>\n            <Heading text={t(\"your-btc-balance-inpool\")} buttonText={t(\"claim\")} onPressButton={goToFarming} />\n            {/* @ts-ignore */}\n            <LoadingNumber loading={state.loadingBTCInpool} number={state.yourBTCInpool} />\n        </View>\n    );\n};\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number,18,8)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\n\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://www.btcst.finance/\" + path.toLowerCase(), \"_blank\");\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\n\nconst sum = tokens => (tokens ? tokens.reduce((previous, current) => previous + (current.valueUSD || 0), 0) : 0);\n\nexport default SHTHomeScreen;\n"],"sourceRoot":""}