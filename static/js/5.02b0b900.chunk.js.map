{"version":3,"sources":["src/components/Heading.tsx","src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Input.tsx","src/components/InfoBox.tsx","src/components/TokenInput.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Notice.tsx","src/components/Meta.tsx","src/components/ApproveButton.tsx","src/hooks/useSTStakingState.tsx","src/screens/SHTStakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Border","border","width","backgroundColor","marginTop","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","Input","textDark","textMedium","onChangeText","useCallback","onError","errors","forbidden","forEach","validation","match","regexp","error","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","InfoBox","backgroundLight","borderDark","useStyles","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","symbol","TokenInput","onAmountChanged","parseBalance","e","endsWith","indexOf","label","value","amount","placeholder","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","ErrorMessage","code","message","FetchingButton","t","useTranslation","InsufficientBalanceButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Meta","url","suffix","textDecorationLine","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","a","async","address","spender","tx","wait","onSuccess","hidden","useSTStakingState","provider","signer","getTokenAllowance","setAmount","stakeActions","enter","leave","stoken","setSToken","setloading","stokenAllowed","setSTokenAllowed","yourTotalSToken","setYourTotalSToken","yourFreeToSendSToken","setYourFreeToSendSToken","yourSTokenStaked","setYourSTokenStaked","totalSTokenSupply","setTotalSTokenSupply","entering","setEntering","leaving","setLeaving","txHappend","setTxHappend","sToken","BTCST","logoURI","BigNumber","from","useEffect","useAsyncEffect","minAllowance","pow","BTCSTFarm","stokenAllowance","gte","getFreeToTransferAmount","getAddress","freeToMove","viewUserInfo","userInfoInFarm","amnt","lockedAmnt","lockedAmount","add","stokenContract","getContract","balanceOf","totalSupplyOfSToken","onEnter","parsed","console","log","onLeave","Staking","state","onPressEx","onPressSwap","STokenBalance","AmountInput","isZero","StakeInfo","isEmptyValue","powerPrice","FixedNumber","divUnsafe","powerPerHashUnitDay","mulUnsafe","dailyBTCYeild","btcPrice","dailyBTCNetrewardPerHashUnit","subUnsafe","dailyReward","alreadyReward","suppose","addUnsafe","dailyRewardTotal","fromString","share","round","toString","Controls","setError","StakeButton","SHTStakeScreen"],"mappings":"uFAAA,8DA2CeA,IAzBmB,SAAAC,GAAU,IAChCC,EAAWC,cAAXD,OACR,OACI,kBAAC,IAAD,CAAUE,MAAO,CAAEC,WAAY,WAAYC,OAAQ,GAAIC,aAAcN,EAAMO,SAAW,EAAIC,IAAQC,QAC9F,kBAAC,IAAD,CACIC,QAAQ,EACRC,WAAYX,EAAMW,YAAc,OAChCJ,SAAUP,EAAMO,SAChBJ,MAAO,CAAC,CAAES,KAAM,EAAGC,SAAUC,IAAa,GAAK,GAAIC,cAAeP,IAAQQ,MAAQhB,EAAMG,QACvFH,EAAMiB,MAEVjB,EAAMkB,YACH,kBAAC,IAAD,CACIC,KAAM,QACNC,KAAM,QACNC,MAAOrB,EAAMkB,WACbI,QAAStB,EAAMuB,cACfC,MAAOvB,EACPwB,YAAa,CAAEC,kBAAmBlB,IAAQQ,W,kCCpC9D,2CAqBeW,IAfA,SAAA3B,GAAU,IACb4B,EAAW1B,cAAX0B,OACR,OACI,kBAAC,IAAD,CACIzB,MAAO,CACHE,OAAQ,EACRwB,MAAO,OACPC,gBAAiBF,EACjBG,UAAW/B,EAAMS,MAAQD,IAAQQ,KAAOR,IAAQC,MAChDH,aAAcN,EAAMS,MAAQD,IAAQQ,KAAOR,IAAQC,MAAQD,IAAQQ,U,uICQpEgB,EAbiB,SAAAhC,GAAK,OACjC,kBAACiC,EAAA,EAAD,OACQjC,EADR,CAEIG,MAAO,CACH,CACI0B,MAAO,OACPE,UAAW/B,EAAMkC,YAAc,EAAoB,QAAhBC,IAASC,GAAe5B,IAAQ6B,MAAQ7B,IAAQ8B,QAEvFtC,EAAMG,W,kCCyBZoC,EAAa,SAACvC,GAA4B,IACpCwC,EAAaC,qBAAWC,KAAxBF,SADmC,EAETtC,cAA1ByC,EAFmC,EAEnCA,WAAYC,EAFuB,EAEvBA,UACpB,OACI,kBAAC,IAAD,OACQ5C,EADR,CAEI6C,OAAQL,EACRM,UAAWN,EAAW,aAAUO,EAChC5C,MAAO,CACH2B,gBAAiBa,EACjBK,YAAa,EACbC,YAAaT,EAAW,QAAUI,OAMnCM,EApDK,WAAO,IACfV,EAAaC,qBAAWC,KAAxBF,SADc,EAEYtC,cAA1ByC,EAFc,EAEdA,WAAYC,EAFE,EAEFA,UACdO,EAAiBC,YAAU,+BAAgC,GAAI,UAC/DC,EAAgBD,YAAU,6CAA8C,GAAI,UAE5EE,EAAWF,YAAU,4BAA6B,GAAI,UAEtDG,EAAOH,YAAU,8BAA8B,GAAG,UAClDI,EAAiBJ,YAAU,qEAAsE,GAAI,UAC3G,OACI,kBAACK,EAAA,EAAD,CAAUtD,MAAO,CAAE0B,MAAO,OAAQ6B,eAAgB,WAC9C,kBAAC,EAAD,CAAYvC,KAAK,aAAaG,QAAS+B,IACvC,kBAAC,EAAD,CAAYlC,KAAK,UAAUG,QAAS6B,IACpC,kBAAC,EAAD,CAAYhC,KAAK,SAASG,QAASgC,IACnC,kBAAC,EAAD,CAAYnC,KAAK,WAAWG,QAASiC,IAErC,kBAAC,IAAD,CACIpC,KAAM,qBACNwC,KAAM,UACNC,QAAQ,EACRC,SAAS,EACTrC,MAAOmB,EACPmB,aAActB,EAAW,QAAU,UACnCrC,MAAO,CAAE2B,gBAAiBa,GAC1BoB,eAAgB,CACZf,YAAa,EACbC,YAAaT,EAAW,QAAUI,GAEtCtB,QAASkC,M,QCxBnBQ,EAAQ,CACVC,GAAIC,EAAQ,KACZC,GAAID,EAAQ,KACZE,GAAIF,EAAQ,KACZG,GAAIH,EAAQ,MAgCVI,EAAO,SAAC,GAAsB,IAApBX,EAAmB,EAAnBA,KAAMY,EAAa,EAAbA,OACZC,EAAUC,cACVC,EAAWC,cAIjB,OACI,kBAACC,EAAA,EAAD,CAAoBtD,QAJR,WACZkD,EAAQK,KAAKH,EAASI,SAAW,WAAaP,IAGRpE,MAAO,CAAE4E,iBAAkB,IAC7D,kBAACC,EAAA,EAAD,CAAOC,OAAQjB,EAAML,GAAOxD,MAAO,CAAE0B,MAAO,GAAIxB,OAAQ,QAKrD6E,IA1CG,WACd,IAAMC,EAAiB/B,YACnB,6BACA,GACA,UAEJ,OACI,kBAAC,EAAD,CAAQlB,aAAa,GACjB,kBAACD,EAAA,EAAD,CAAM9B,MAAO,CAAE0B,MAAO,OAAQuD,QAAS5E,IAAQ8B,OAAQlC,WAAY,WAC/D,kBAACwE,EAAA,EAAD,CAAoBtD,QAAS6D,GACzB,kBAACH,EAAA,EAAD,CACIC,OAAQf,EAAQ,KAChB/D,MAAO,CAAE0B,MAAO,IAAKxB,OAAQ,GAAI0B,UAAWvB,IAAQQ,SAG5D,kBAAC,EAAD,MACA,kBAACqE,EAAA,EAAD,CAAMC,MAAM,EAAMnF,MAAO,CAAE4B,UAAWvB,IAAQQ,OAA9C,kDAC0CuE,IAAUC,SAASC,QAD7D,KAGA,kBAAChC,EAAA,EAAD,CAAUtD,MAAO,CAAE4B,UAAWvB,IAAQC,QAClC,kBAAC,EAAD,CAAMkD,KAAM,KAAMY,OAAQ,OAC1B,kBAAC,EAAD,CAAMZ,KAAM,KAAMY,OAAQ,Y,+FC2B/BmB,IAhDe,SAAA1F,GAAU,IAAD,EACSE,cAApCyF,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,WAAYhD,EADK,EACLA,UACxBxB,EAAOpB,EAAMoB,MAAQ,SACrBI,EAAQxB,EAAMwB,OAASmE,EACvB9E,EAAoB,UAATO,EAAmB,GAAc,UAATA,EAAmB,GAAK,GAC3DyE,EAAeC,uBACjB,SAAC7E,GACG,MAAAjB,EAAM6F,cAAN7F,EAAM6F,aAAe5E,GACrB,MAAAjB,EAAM+F,SAAN/F,EAAM+F,QAAU,IAChB,IAAMC,EAAS,GACF,KAAT/E,GAAejB,EAAMiG,WACrBjG,EAAMiG,UAAUC,SAAQ,SAAAC,GAChBlF,EAAKmF,MAAMD,EAAWE,SACtBL,EAAOnB,KAAKsB,EAAWG,UAItB,KAATrF,GAAejB,EAAMuG,SACrBvG,EAAMuG,QAAQL,SAAQ,SAAAC,GACblF,EAAKmF,MAAMD,EAAWE,SACvBL,EAAOnB,KAAKsB,EAAWG,UAI/BN,EAAOQ,OAAS,IAChB,MAAAxG,EAAM+F,SAAN/F,EAAM+F,QAAUC,EAAOS,KAAK,UAGpC,CAACzG,EAAM6F,aAAc7F,EAAM+F,QAAS/F,EAAMiG,UAAWjG,EAAMuG,UAE/D,OACI,kBAAC,IAAD,OACQvG,EADR,CAEI0G,WAAY,CACR,CAAE7F,WAAU8F,WAAY,UAAW5F,cAAe,EAAGS,QAAOO,UAAW,EAAG6E,UAAW,IAErE,QAAhBzE,IAASC,GAAe,CAAEyE,QAAS,QAAW,GAC9C7G,EAAM0G,YAEVI,WAAY,CAAC,CAAEtF,MAAOoE,GAAc5F,EAAM8G,YAC1CC,qBAAsB/G,EAAM+G,sBAAwBnE,EACpDoE,WAAYhH,EAAM+F,QAAU,CAAE1F,OAAQ,GAAML,EAAMgH,WAClDjD,eAAgB,CAAC,CAAErC,kBAAmB,GAAK1B,EAAM+D,gBACjD8B,aAAcA,O,+rBCnCXoB,IApBC,SAACjH,GAAyC,IAC9CwC,EAAaC,qBAAWC,KAAxBF,SAD6C,EAEbtC,cAAhCgH,EAF6C,EAE7CA,gBAAiBC,EAF4B,EAE5BA,WACjBvF,EAAWwF,cAAXxF,OACR,OACI,kBAAC,IAAD,OACQ5B,EADR,CAEIG,MAAO,CAAC,EAAD,KAEIyB,EAAO,CAAEJ,MAAOgB,EAAW2E,EAAaD,KAF5C,IAGCpF,gBAAiBoF,EACjBnF,UAAWvB,IAAQ8B,OAAS9B,IAAQC,MACpC2E,QAAS5E,IAAQC,MAAQD,IAAQQ,OAErChB,EAAMG,Y,4tBCGtB,IAkDMkH,EAAY,SAACrH,GAAmE,IAC1EC,EAAWC,cAAXD,OACFqH,EAAaxB,uBAAY,WAC3B,GAAI9F,EAAMuH,MAAO,CACb,IAAIC,EAAUxH,EAAMuH,MAAMC,QAC1B,GAAIC,YAAMzH,EAAMuH,OAAQ,CAEpB,IAAMG,EAAMC,YAAM,IAClBH,EAAUA,EAAQI,GAAGF,GAAOF,EAAQK,IAAIH,GAAOI,SAAOC,UAAUC,KAEpEhI,EAAMiI,aAAaC,YAAcV,EAASxH,EAAMuH,MAAMY,cAE3D,CAACnI,EAAMuH,MAAOvH,EAAMiI,eACvB,OACI,kBAAC,IAAD,CAAM9H,MAAO,CAAEiI,SAAU,WAAYC,MAAO,GAAIC,OAAwB,QAAhBnG,IAASC,GAAe,GAAK,KACjF,kBAAC,IAAD,CACIjB,KAAM,QACNC,KAAM,QACNI,MAAOvB,EACPoB,MAAOrB,EAAMuI,gBAAkBzH,IAAa,OAASd,EAAMuH,MAAMiB,OAAS,OAC1E7H,WAAY,OACZW,QAASgG,EACT7F,YAAa,CAAEC,kBAAmBlB,IAAQQ,UAM3CyH,IA9EyB,SAAAzI,GAAU,IAAD,IACrC4B,EAAWwF,cAAXxF,OACFiE,EAAeC,uBACjB,SAAC7E,GACG,GAAIjB,EAAMuH,OAASvH,EAAM0I,gBACrB,IACIC,YAAa1H,EAAMjB,EAAMuH,MAAMY,UAC/BnI,EAAM0I,gBAAgBzH,GACxB,MAAO2H,GACD3H,EAAK4H,SAAS,MAAQ5H,EAAK6H,QAAQ,OAAS7H,EAAKuF,OAAS,GAC1DxG,EAAM0I,gBAAgBzH,MAKtC,CAACjB,EAAMuH,MAAOvH,EAAM0I,kBAExB,OACI,kBAAC,IAAD,KACK1I,EAAMqB,OAAS,kBAAC,IAAD,CAASJ,KAAMjB,EAAMqB,QACrC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI0H,MAAO/I,EAAM+I,MACbC,MAAOhJ,EAAMiJ,OACbpD,aAAcA,EACdqD,YAAa,MACbC,aAAc,cACdC,UAAWpJ,EAAMoJ,YAAa,EAC9B1C,WAAY,CAAE3B,iBAAkBvE,IAAQQ,MACxCqI,oBAAqB,CAAEC,kBAAmB,GAC1CxC,WAAY,CAAEH,WAAY,QAAStG,OAAQL,EAAM+I,MAAQ,OAAS,GAClEhF,eAAc,OACPnC,KADO,IAEVF,kBAAmBlB,IAAQQ,KAC3BuI,WAAY,GACZxI,cAAe,OAGtB,SAAAf,EAAMuH,QAAN,WAAaC,cAAb,IAAsBI,GAAG,MAAO5H,EAAMwJ,eACnC,kBAACnC,EAAD,CACIE,MAAOvH,EAAMuH,MACbgB,cAAevI,EAAMuI,cACrBN,aAAcjI,EAAM0I,sB,kCCnE5C,2CA2Bee,IApBM,SAAC,GAAD,IAAGnD,EAAH,EAAGA,MAAH,OACjB,kBAAC,IAAD,CACInG,MAAO,CACH8C,YAAa,MACbD,YAAa,EACbnB,MAAO,OACPuD,QAAS5E,IAAQQ,KACjBe,UAAWvB,IAAQC,QAEtB6F,EAAMoD,MACH,kBAAC,IAAD,CAAM/I,WAAY,OAAQR,MAAO,CAAEqB,MAAO,MAAOX,SAAU,KAA3D,cACgByF,EAAMoD,MAG1B,kBAAC,IAAD,CAAMpE,MAAM,EAAMnF,MAAO,CAAEqB,MAAO,MAAOX,SAAU,KAC9CyF,EAAMqD,Y,kCCtBnB,qCASeC,IAJQ,WACnB,IAAMC,EAAIC,cACV,OAAO,kBAAC,IAAD,CAAQzI,MAAOwI,EAAE,YAAatJ,UAAU,M,kCCPnD,qCASewJ,IAJmB,SAAC,GAAoC,IAAlCvB,EAAiC,EAAjCA,OAC3BqB,EAAIC,cACV,OAAO,kBAAC,IAAD,CAAQzI,MAAOmH,EAASqB,EAAE,gBAAiB,CAAErB,WAAYqB,EAAE,wBAAyBtJ,UAAU,M,kCCPzG,qEA4CeyJ,IA1BA,SAAChK,GAAwB,IAC5B4C,EAAc1C,cAAd0C,UAEFqH,GAAcrI,EADDwF,cAAXxF,QACmB,CAAEJ,MAAOxB,EAAMwB,QACpCA,EAAQxB,EAAMwB,OAASoB,EAC7B,OACI,kBAAC,IAAD,CAAMzC,MAAO,CAACH,EAAMkK,MAAQ,GAAKD,EAAajK,EAAMG,QAChD,kBAAC,IAAD,CAAMmF,MAAM,EAAMnF,MAAO,CAAEqB,UACtBxB,EAAMiB,MAEVjB,EAAMkB,YAAclB,EAAMuB,eACvB,kBAAC,IAAD,CACIF,MAAOrB,EAAMkB,WACbC,KAAM,QACNC,KAAM,QACNT,WAAY,OACZW,QAAStB,EAAMuB,cACf4I,WAAY,CAAE3I,SACdC,YAAa,CAAEC,kBAAmB,EAAG0I,gBAAiB,GACtDjK,MAAO,CAAEkK,UAAW,WAAYtI,UAAWvB,IAAQQ,W,kCCrCvE,8DA0CesJ,IA1Ba,SAAAtK,GAAU,IAAD,EACcE,cAAvC0F,EADyB,EACzBA,WAAYhD,EADa,EACbA,UAAWsG,EADE,EACFA,YACzB5H,EAAU8B,YAAUpD,EAAMuK,KAAO,GAAI,GAAI,UACzCtJ,EAAOjB,EAAMO,SACb,MACAP,EAAMiB,KACNjB,EAAMiB,MAAQjB,EAAMwK,OAAS,IAAMxK,EAAMwK,OAAS,IAClD,iBACN,OACI,kBAAC,IAAD,CAAUrK,MAAO,CAAEuD,eAAgB,gBAAiB3B,UAAW,IAC3D,kBAAC,IAAD,CAAMuD,MAAOxE,IAAYH,WAAY,OAAQR,MAAO,CAAEqB,MAAOxB,EAAMO,SAAW2I,EAActD,IACvF5F,EAAM+I,OAEX,kBAAC,IAAD,CACIzD,MAAOxE,IACPQ,QAAStB,EAAMuK,IAAMjJ,OAAUyB,EAC/B5C,MAAO,CACHqB,MAAOxB,EAAMO,SAAW2I,EAAclJ,EAAMiB,KAAO2E,EAAahD,EAChE6H,mBAAoBzK,EAAMuK,IAAM,YAAc,SAEjDtJ,M,+HCaFyJ,IAhC+B,SAAA1K,GAAU,IAAD,EAC7C6J,EAAIC,cACFa,EAAiBlI,qBAAWmI,KAA5BD,aAF2C,EAGrBE,oBAAS,GAHY,WAG5CC,EAH4C,KAGnCC,EAHmC,KAI7CzJ,EAAUwE,uBAAY,0BAAAkF,EAAAC,OAAA,oDACpBjL,EAAMuH,MADc,wBAEpBvH,EAAM+F,QAAQ,IACdgF,GAAW,GAHS,oBAAAC,EAAA,MAKCL,EAAa3K,EAAMuH,MAAM2D,QAASlL,EAAMmL,UALzC,YAKVC,EALU,4CAAAJ,EAAA,MAONI,EAAGC,QAPG,QAQZrL,EAAMsL,YARM,0DAWhBtL,EAAM+F,QAAN,MAXgB,yBAahBgF,GAAW,GAbK,sFAgBzB,CAAC/K,EAAMuH,QACV,OAAIvH,EAAMuL,OAAe,kBAAC,IAAD,MAErB,kBAAC,IAAD,CACIlK,MAAOwI,EAAE,WAAa,MAAO,SAAA7J,EAAMuH,YAAN,IAAaiB,SAAU,IACpDlH,QAASA,EACTwJ,QAASA,EACT/G,eAAgB,CAAEzD,aAAcE,IAAQQ,U,yICmHrCwK,IAtHW,WAAO,IAAD,EAC2B/I,qBAAWmI,KAA1Da,EADoB,EACpBA,SAASC,EADW,EACXA,OAAQR,EADG,EACHA,QAASS,EADN,EACMA,kBADN,EAGAd,mBAAS,IAHT,WAGrB5B,EAHqB,KAGb2C,EAHa,OAIHC,cAAjBC,EAJoB,EAIpBA,MAAOC,EAJa,EAIbA,MAJa,EAKDlB,qBALC,WAKrBmB,EALqB,KAKdC,EALc,OAMCpB,oBAAS,GANV,WAMrBC,EANqB,KAMboB,EANa,OAOcrB,oBAAS,GAPvB,WAOrBsB,EAPqB,KAONC,EAPM,OASiBvB,qBATjB,WASrBwB,EATqB,KASLC,EATK,OAU2BzB,qBAV3B,WAUrB0B,EAVqB,KAUAC,EAVA,OAWmB3B,qBAXnB,WAWrB4B,EAXqB,KAWJC,EAXI,OAYqB7B,qBAZrB,WAYrB8B,EAZqB,KAYHC,EAZG,OAaI/B,oBAAS,GAbb,WAarBgC,EAbqB,KAaXC,EAbW,OAcEjC,oBAAS,GAdX,YAcrBkC,GAdqB,MAcZC,GAdY,SAeKnC,mBAAiB,GAftB,aAerBoC,GAfqB,MAeXC,GAfW,MAiBtBC,GAAe,CACjBxJ,KAAM,8BACNuH,QAASkC,IACTjF,SAAU,GACVK,OAAQ,QACR6E,QAAS,GACT7F,QAASM,SAAOwF,UAAUC,KAAK,IAGnCC,qBAAU,WACN5B,EAAU,IACVK,EAAUkB,IACVjB,GAAW,GACXM,EAAwB1E,SAAOwF,UAAUC,KAAK,IAC9Cb,EAAoB5E,SAAOwF,UAAUC,KAAK,IAC1CjB,EAAmBxE,SAAOwF,UAAUC,KAAK,IACzCL,GAAa,KACd,CAAChC,IACJuC,KAAe,sCAAAzC,EAAAC,OAAA,qDACPQ,GAAYC,GAAUM,GADf,wBAEPI,GAAiB,GACjBF,GAAW,GAHJ,SAKGwB,EAAe5F,SAAOwF,UAAUC,KAAK,GACtCI,IAAI,IACJ9F,IAAI,GAPN,WAAAmD,EAAA,MAQ2BW,EAAkBK,EAAOd,QAAS0C,MAR7D,cAQGC,EARH,OASHzB,EAAiBtE,SAAOwF,UAAUC,KAAKM,GAAiBC,IAAIJ,IATzD,OAAA1C,EAAA,KAUsB+C,IAVtB,YAAA/C,EAAA,MAUoDU,EAAOsC,cAV3D,gCAUwEvC,EAVxE,6EAUGwC,EAVH,cAAAjD,EAAA,KAW0BkD,IAX1B,YAAAlD,EAAA,MAW6CU,EAAOsC,cAXpD,gCAWiEvC,EAXjE,6EAWG0C,EAXH,aAYH3B,EAZG,YAAAxB,EAAA,MAY2BiD,GAZ3B,yDAAAjD,EAAA,MAaiBmD,GAbjB,eAaGC,EAbH,OAaiCnF,OAbjC,YAAA+B,EAAA,MAcuBmD,GAdvB,eAcGE,EAdH,OAcuCC,aAC1C5B,EAAoB5E,SAAOwF,UAAUC,KAAKa,GAAMG,IAAIzG,SAAOwF,UAAUC,KAAKc,KACpEG,EAAiBC,YAAY,QAASrB,IAAO1B,GAhBhD,MAiBHY,EAjBG,YAAAtB,EAAA,MAiBsBwD,EAAeE,UAAUhD,EAAOsC,eAjBtD,mDAkBHpB,EAlBG,YAAA5B,EAAA,MAkBwB2D,YAAoBlD,IAlB5C,+DAoBHS,GAAW,GApBR,oFAuBb,CAACT,EAASC,EAAOM,EAAOiB,KAC1B,IAAM2B,GAAU9I,uBAAY,4BAAAkF,EAAAC,OAAA,qDACpBhC,GAAU+C,GAAUN,GADA,wBAEpBoB,GAAY,GAFQ,SAIV+B,EAASlG,YAAaM,EAAQ+C,EAAO7D,UAC3C2G,QAAQC,IAAI,mBALI,WAAA/D,EAAA,MAMCc,EAAM+C,EAAQnD,IANf,UAMVN,EANU,OAOhB0D,QAAQC,IAAI,gBACR3D,EARY,oCAAAJ,EAAA,MASNI,EAAGC,QATG,QAWZO,EAAU,IAEVsB,GADYD,GAAU,GAEtB6B,QAAQC,IAAI,cAdA,yBAiBhBjC,GAAY,GAjBI,oFAoBzB,CAAC7D,EAAQ+C,EAAQN,IAEdsD,GAAUlJ,uBAAY,4BAAAkF,EAAAC,OAAA,qDACpBhC,GAAUyC,GAASM,GADC,wBAEpBgB,IAAW,GAFS,SAIV6B,EAASlG,YAAaM,EAAQ+C,EAAO7D,UAJ3B,WAAA6C,EAAA,MAKCe,EAAM8C,EAAQnD,IALf,YAKVN,EALU,4CAAAJ,EAAA,MAONI,EAAGC,QAPG,QASZO,EAAU,IAEVsB,GADYD,GAAU,GAVV,yBAchBD,IAAW,GAdK,oFAiBzB,CAAC/D,EAAQ+C,EAAQN,IACpB,MAAO,CACHZ,UACA7B,SACA2C,YACAI,SACAK,kBACAE,uBACAE,mBACAN,gBACAC,mBACAO,oBACAiC,WACA/B,WACAmC,WACAjC,WACAE,gB,qWCrGFgC,EAAU,WAAO,IAAD,EACZpF,EAAIC,cACJoF,EAAQ1D,cACR2D,EAAY/L,YAAU,8CAA+C,GAAI,UACzEgM,EAAchM,YAAU,wCAAyC,GAAI,UAC3E,OACI,kBAAC,IAAD,CAAMjD,MAAO,CAAE4B,UAAWvB,IAAQ6B,QAC9B,kBAACgN,EAAD,CAAeH,MAAOA,IACtB,kBAAC,IAAD,MACA,kBAACI,EAAD,CAAaJ,MAAOA,IACnBA,EAAMlD,SAAN,SAAgBkD,EAAM7C,sBAAtB,EAAgB,EAAuBkD,WACpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQtO,KAAM4I,EAAE,uBAAwBrI,MAAO,SAAUrB,MAAO,CAAE4B,UAAWvB,IAAQC,SACrF,kBAAC,IAAD,CAAQN,MAAO,CAAC4B,UAAUvB,IAAQQ,MAAOK,MAAOwI,EAAE,kBAAmBvI,QAAS6N,IAC9E,kBAAC,IAAD,CAAQhP,MAAO,CAAC4B,UAAUvB,IAAQQ,MAAOK,MAAOwI,EAAE,sBAAuBvI,QAAS8N,KAG1F,kBAACI,EAAD,CAAWN,MAAOA,MAKxBG,EAAgB,SAAC,GAAwC,IAAtCH,EAAqC,EAArCA,MACfrF,EAAIC,cACHgB,EAA+EoE,EAA/EpE,QAAQuB,EAAuE6C,EAAvE7C,gBAAgBE,EAAuD2C,EAAvD3C,qBAAqBE,EAAkCyC,EAAlCzC,iBAFM,GAE4ByC,EAAjB/C,cACxBjM,eAArCyF,EAHkD,EAGlDA,SAAU/C,EAHwC,EAGxCA,UAHwC,EAG7BsG,YAC7B,OACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,CACI/I,MAAO,CACHU,SAAUC,IAAa,GAAK,GAC5BR,aAAcE,IAAQQ,KACtBQ,MAAOsJ,EAASlI,EAAY+C,KAE/BmF,GAAYoE,EAAMlD,QAAWK,EACzBxC,EAAE,YAAY,IAAI3B,YAAcmE,EAAiB6C,EAAMlD,OAAO7D,UAAU,SAD9B0B,EAAE,aAIrD,kBAAC,IAAD,CACI1J,MAAO,CACHU,SAAUC,IAAa,GAAK,GAC5BR,aAAcE,IAAQQ,KACtBQ,MAAOsJ,EAASlI,EAAY+C,KAE/BmF,GAAYoE,EAAMlD,QAAWK,EAC7BxC,EAAE,gBAAgB3B,YAAcqE,EAAsB2C,EAAMlD,OAAO7D,UAAU,IAC7E0B,EAAE,kBAAkB3B,YAAcuE,EAAkByC,EAAMlD,OAAO7D,UAFnB,MAQzDmH,EAAc,SAAC,GAAwC,IAAtCJ,EAAqC,EAArCA,MACbrF,EAAIC,cACV,OAAKoF,EAAMlD,QAAUkD,EAAM7C,gBAAgBkD,SAChC,kBAAC,IAAD,CAAStO,KAAM4I,EAAE,mBAAoBtJ,UAAU,IAGtD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASU,KAAM4I,EAAE,qBACjB,kBAAC,IAAD,CACItC,MAAO2H,EAAMlD,OACb/C,OAAQiG,EAAMjG,OACdP,gBAAiBwG,EAAMtD,UACvBxC,UAAWtI,QAOrB0O,EAAY,SAAC,GAAwC,IAAtCN,EAAqC,EAArCA,MACXrF,EAAIC,cAD4C,EAET5J,cAA3B0C,GAFoC,EAE9C+C,SAF8C,EAEpC/C,WAAWsG,EAFyB,EAEzBA,YACvB3I,GACD2O,EAAMlD,QACPkD,EAAM7C,gBAAgBkD,WACrBL,EAAMzC,kBACPgD,YAAaP,EAAMjG,QAEjByG,EAAa5H,SAAO6H,YAAYpC,KAAK,IAAIqC,UAAU9H,SAAO6H,YAAYpC,KAAK,MAC3EsC,EAAsB/H,SAAO6H,YAAYpC,KAAK,IAAIuC,UAAUhI,SAAO6H,YAAYpC,KAAK,KACpFwC,EAAgBjI,SAAO6H,YAAYpC,KAAK,KAAKqC,UAAU9H,SAAO6H,YAAYpC,KAAK,MAC/EyC,EAAWlI,SAAO6H,YAAYpC,KAAK,OACnC0C,EAA+BF,EAAcG,UAC/CL,EAAoBC,UAAUJ,GAAYE,UAAUI,IAElDG,EAAc5P,OACdwC,EACA+E,SAAO6H,YAAYpC,KAAK2B,EAAMjG,QACzB6G,UAAUG,GACVL,UAAU9H,SAAO6H,YAAYpC,KAAK,KACvC6C,EAAgB7P,OAChBwC,EACA+E,SAAO6H,YAAYpC,KAAKrF,YAAcgH,EAAMzC,iBAAiByC,EAAMlD,OAAQ7D,WACxE2H,UAAUG,GACVL,UAAU9H,SAAO6H,YAAYpC,KAAK,KACrC8C,EAAU9P,GAAQ,MAAY4P,OAAVpN,EAAUoN,EAAaG,UAAUF,GAGrDG,EAAmBhQ,OAAWwC,EAC5B+E,SAAO6H,YAAYa,WAAWtI,YAAcgH,EAAMvC,kBAAkBuC,EAAMlD,OAAQ7D,WACjFyH,UAAU9H,SAAO6H,YAAYpC,KAAK,KAAKuC,UAAUG,GAKpDQ,GAJelQ,GACGoI,YAAauG,EAAMjG,OAAQiG,EAAMlD,OAAQ7D,UACxCoG,IAAIW,EAAMzC,kBAErBlM,OACRwC,EACAsN,EAAST,UAAUW,GAAmBT,UAAUhI,SAAO6H,YAAYpC,KAAK,MAAMmD,MAAM,IAC1F,OACI,kBAAC,IAAD,KAMI,kBAAC,IAAD,CACAvQ,MAAO,CACHU,SAAUC,IAAa,GAAK,GAC5BR,aAAcE,IAAQ8B,OACtBd,MAAOjB,EAAW2I,EAActG,IAExBiH,EAAXtJ,EAAa,MAAW,mBAEzB,kBAAC,IAAD,CAAMwI,MAAOc,EAAE,eAAgB5I,KAAMwP,EAAOjG,OAAQ,IAAKjK,SAAUA,IACnE,kBAAC,IAAD,CAAMwI,MAAOc,EAAE,qBAAsB5I,KAAMoP,EAAUA,EAAQK,MAAM,GAAGC,WAAa,GAAIpQ,SAAUA,IACjG,kBAACqQ,EAAD,CAAU1B,MAAOA,MAKvB0B,EAAW,SAAC,GAAwC,IAAtC1B,EAAqC,EAArCA,MAAqC,EAC3BrE,mBAAwB,IADG,WAC9CvE,EAD8C,KACvCuK,EADuC,KAErD,OACI,kBAAC,IAAD,CAAM1Q,MAAO,CAAE4B,UAAWvB,IAAQ8B,UAC5B4M,EAAMlD,QAAUkD,EAAM7C,gBAAgBkD,UAAYE,YAAaP,EAAMjG,QACnE,kBAAC6H,EAAD,CAAa5B,MAAOA,EAAOnJ,QAAS8K,EAAUtQ,UAAU,IACxDoI,YAAauG,EAAMjG,OAAQiG,EAAMlD,OAAO7D,UAAUP,GAAGsH,EAAM7C,iBAC3D,kBAAC,IAAD,CAA2B7D,OAAQ0G,EAAMlD,OAAOxD,SAChD0G,EAAMpE,QACN,kBAAC,IAAD,MAEA,oCACI,kBAAC,IAAD,CACIvD,MAAO2H,EAAMlD,OACbb,QAASyC,IACTtC,UAAW,kBAAM4D,EAAM9C,kBAAiB,IACxCrG,QAAS8K,EACTtF,OAAQ2D,EAAM/C,gBAElB,kBAAC2E,EAAD,CAAa5B,MAAOA,EAAOnJ,QAAS8K,EAAUtQ,UAAW2O,EAAM/C,iBAGtE7F,EAAMqD,SAA0B,OAAfrD,EAAMoD,MAAiB,kBAAC,IAAD,CAAcpD,MAAOA,MAKpEwK,EAAc,SAAC,GAQd,IAPH5B,EAOE,EAPFA,MACAnJ,EAME,EANFA,QACAxF,EAKE,EALFA,SAMMsJ,EAAIC,cAWV,OAAO,kBAAC,IAAD,CAAQzI,MAAOwI,EAAE,SAAUiB,QAASoE,EAAMrC,SAAUvL,QAV3C,oBAAA0J,EAAAC,OAAA,uDACZlF,EAAQ,IADI,oBAAAiF,EAAA,MAGFkE,EAAMN,WAHJ,OAIRM,EAAMtD,UAAU,IAJR,gDAMR7F,EAAQ,EAAD,IACP+I,QAAQC,IAAR,MAPQ,iEAU6DxO,SAAUA,KAG5EwQ,UA3MQ,WACnB,IAAMlH,EAAIC,cACV,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO7I,KAAM4I,EAAE,WACf,kBAAC,IAAD,CAAMhH,OAAO,GAAOgH,EAAE,eAGtB,kBAACoF,EAAD,OAEa,QAAhB9M,IAASC,IAAgB,kBAAC,IAAD,OAE9B,kBAAC,IAAD","file":"static/js/5.02b0b900.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"decimal-pad\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve\") + \" \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,getFreeToTransferAmount,totalSupplyOfSToken,stakeActions, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { getContract, parseBalance } from \"../utils\";\n\nexport interface StakingState {\n    loading:boolean;\n    stoken?: Token;\n    \n    amount: string;\n    setAmount: (amount: string) => void;\n\n    yourTotalSToken:ethers.BigNumber;\n    yourFreeToSendSToken:ethers.BigNumber;\n    yourSTokenStaked:ethers.BigNumber;\n\n    stokenAllowed: boolean;\n    setSTokenAllowed: (allowed: boolean) => void;\n    \n    totalSTokenSupply:ethers.BigNumber;\n\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n\n    txHappend:number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSTStakingState = () => {\n    const { provider,signer, address, getTokenAllowance} = useContext(EthersContext);\n\n    const [amount, setAmount] = useState(\"\");\n    const { enter, leave } = stakeActions();\n    const [stoken,setSToken] = useState<Token>();\n    const [loading,setloading] = useState(true);\n    const [stokenAllowed, setSTokenAllowed] = useState(false);\n\n    const [yourTotalSToken,setYourTotalSToken] = useState<ethers.BigNumber>();\n    const [yourFreeToSendSToken,setYourFreeToSendSToken] = useState<ethers.BigNumber>();\n    const [yourSTokenStaked,setYourSTokenStaked] = useState<ethers.BigNumber>();\n    const [totalSTokenSupply,setTotalSTokenSupply] = useState<ethers.BigNumber>();\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n    const [txHappend,setTxHappend] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 17,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n\n    useEffect(() => {\n        setAmount(\"\");\n        setSToken(sToken);\n        setloading(true);\n        setYourFreeToSendSToken(ethers.BigNumber.from(0));\n        setYourSTokenStaked(ethers.BigNumber.from(0));\n        setYourTotalSToken(ethers.BigNumber.from(0));\n        setTxHappend(0);\n    }, [address]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && stoken) {\n            setSTokenAllowed(false);\n            setloading(true);\n            try{\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const stokenAllowance = await getTokenAllowance(stoken.address, BTCSTFarm);\n                setSTokenAllowed(ethers.BigNumber.from(stokenAllowance).gte(minAllowance));\n                const freeToMove = await getFreeToTransferAmount(await signer.getAddress(),provider);\n                const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n                setYourFreeToSendSToken(await freeToMove);\n                const amnt = (await userInfoInFarm).amount;\n                const lockedAmnt = (await userInfoInFarm).lockedAmount;\n                setYourSTokenStaked(ethers.BigNumber.from(amnt).add(ethers.BigNumber.from(lockedAmnt)));\n                const stokenContract = getContract(\"ERC20\", BTCST, signer);\n                setYourTotalSToken(await stokenContract.balanceOf(signer.getAddress()));\n                setTotalSTokenSupply(await totalSupplyOfSToken(provider));\n            }finally{\n                setloading(false);\n            }\n        }\n    },[provider,signer,stoken,txHappend]);\n    const onEnter = useCallback(async () => {\n        if (amount && stoken && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                console.log(\"before entering\");\n                const tx = await enter(parsed, signer);\n                console.log(\"before wait\");\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                    console.log(\"after wait\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer &&stoken) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n    return {\n        loading,\n        amount,\n        setAmount,\n        stoken,\n        yourTotalSToken,\n        yourFreeToSendSToken,\n        yourSTokenStaked,\n        stokenAllowed,\n        setSTokenAllowed,\n        totalSTokenSupply,\n        onEnter,\n        entering,\n        onLeave,\n        leaving,\n        txHappend\n    };\n};\n\nexport default useSTStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\nimport useColors from \"../hooks/useColors\";\nimport { ethers } from \"ethers\";\nimport useLinker from \"../hooks/useLinker\";\n\nconst SHTStakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")\n                    // +t(\"or\")+\" \"+t(\"just-send-to-address\")+\" \"+BTCSTFarm\n                                    }</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    const onPressEx = useLinker(\"https://www.binance.com/cn/trade/BTCST_USDT\", \"\", \"_blank\");\n    const onPressSwap = useLinker(\"https://exchange.pancakeswap.finance/\", \"\", \"_blank\");\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourTotalSToken?.isZero() && (\n                <View>\n                    <Notice text={t(\"you-dont-have-btcst\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n                    <Button style={{marginTop:Spacing.tiny}} title={t(\"buy-on-binance\")} onPress={onPressEx}/>\n                    <Button style={{marginTop:Spacing.tiny}} title={t(\"buy-on-pancakeswap\")} onPress={onPressSwap}/>\n                </View>\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const {loading,yourTotalSToken,yourFreeToSendSToken,yourSTokenStaked,stokenAllowed} = state;\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <View>\n            {/* <Heading text={t(\"your-BTCTS\")} /> */}\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 28 : 20,\n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? t(\"fetching\")\n                    :t(\"you-have\")+\" \"+formatBalance(yourTotalSToken, state.stoken.decimals)+\" BTCST\"\n                    }\n            </Text>\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 14 : 10,                    \n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? \"\"\n                :t(\"free-to-send\")+formatBalance(yourFreeToSendSToken, state.stoken.decimals)+\" \"\n                +t(\"staked-in-pool\")+formatBalance(yourSTokenStaked, state.stoken.decimals)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourTotalSToken.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    const disabled =\n        !state.stoken ||\n        state.yourTotalSToken.isZero() ||\n        !state.yourSTokenStaked ||\n        isEmptyValue(state.amount);\n        \n    const powerPrice = ethers.FixedNumber.from(58).divUnsafe(ethers.FixedNumber.from(1000*1000));\n    const powerPerHashUnitDay = ethers.FixedNumber.from(60).mulUnsafe(ethers.FixedNumber.from(24));\n    const dailyBTCYeild = ethers.FixedNumber.from(711).divUnsafe(ethers.FixedNumber.from(100000000));\n    const btcPrice = ethers.FixedNumber.from(22715);\n    const dailyBTCNetrewardPerHashUnit = dailyBTCYeild.subUnsafe(\n        powerPerHashUnitDay.mulUnsafe(powerPrice).divUnsafe(btcPrice));\n    \n    const dailyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(state.amount)\n              .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n              .divUnsafe(ethers.FixedNumber.from(10));\n    const alreadyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(formatBalance(state.yourSTokenStaked,state.stoken!.decimals))\n            .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n            .divUnsafe(ethers.FixedNumber.from(10));\n    const suppose = disabled? undefined:dailyReward?.addUnsafe(alreadyReward!);\n    // console.log(dailyReward?.toString()+\" dailyReward\");\n\n    const dailyRewardTotal = disabled ? undefined : \n            ethers.FixedNumber.fromString(formatBalance(state.totalSTokenSupply,state.stoken!.decimals))\n            .divUnsafe(ethers.FixedNumber.from(10)).mulUnsafe(dailyBTCNetrewardPerHashUnit);\n    const stoenBalance = disabled ? undefined : \n                            parseBalance(state.amount, state.stoken!.decimals)\n                            .add(state.yourSTokenStaked!);\n\n    const share = disabled\n        ? undefined\n        : suppose!.divUnsafe(dailyRewardTotal!).mulUnsafe(ethers.FixedNumber.from(100)).round(6);\n    return (\n        <InfoBox>\n            {/* <AmountMeta\n                amount={suppose ? suppose.round(8).toString() : \"\"}\n                suffix={t(\"btcb-estimated\")}\n                disabled={disabled}\n            /> */}\n            <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: disabled ? placeholder : textLight\n            }}>\n            {disabled ? t(\"n/a\") : t(\"btcb-estimated\")}\n            </Text>\n            <Meta label={t(\"daily-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"your-daily-reward\")} text={suppose ? suppose.round(8).toString() : \"\"} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourTotalSToken.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourTotalSToken) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.stoken}\n                        spender={BTCSTFarm}\n                        onSuccess={() => state.setSTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.stokenAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.stokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n            console.log(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTStakeScreen;\n"],"sourceRoot":""}