{"version":3,"sources":["src/components/Heading.tsx","src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Input.tsx","src/components/InfoBox.tsx","src/components/TokenInput.tsx","src/components/Meta.tsx","src/components/Expandable.tsx","src/hooks/useHistoryState.tsx","src/screens/SHTHistoryScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Border","border","width","backgroundColor","marginTop","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","Input","textDark","textMedium","onChangeText","useCallback","onError","errors","forbidden","forEach","validation","match","regexp","error","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","InfoBox","backgroundLight","borderDark","useStyles","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","symbol","TokenInput","onAmountChanged","parseBalance","e","endsWith","indexOf","label","value","amount","placeholder","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","Meta","url","suffix","textDecorationLine","Expandable","t","useTranslation","useState","expanded","setExpanded","shouldExpand","onExpand","display","children","RAMOUNT_DIVIDER","BigNumber","from","pow","useHistoryState","EthersContext","provider","signer","address","totalMinedBTC","setTotalMinedBTC","loadingTotalMined","setLoadingTotalMined","totalStokenSupply","setTotalStokenSupply","loadingTotalStokenSupply","setLoadingTotalStokenSupply","totalStokenLocked","settotalStokenLocked","loadingTotalStokenLocked","setLoadingTotalStokenLocked","totalStakedBTCST","setTotalStakedBTCST","loadingTotalStaked","setLoadingTotalStaked","btcInpool","setBtcInpool","loadingBTCInpool","setloadingBTCInpool","yourMiningPower","setYourMiningPower","loadingYourMiningPower","setLoadingYourMiningPower","loadingMiningStatList","setLoadingMiningStatList","dayMiningList","setDayMiningList","setAmount","stoken","setSToken","records","setRecords","selectedRecord","setSelectedRecord","loadingDailyRecord","setLoadingDailyRecord","farmInfo","setFarmInfo","recordLastLoadTime","setRecordLastLoadTime","alreadyLoadedTime","setAlreadyLoadedTime","getPriceLoading","setGetPriceLoading","btcstPrice","setBtcstPrice","sToken","BTCST","logoURI","getTimeKey","time","baseTime","stakePeriod","Error","passed","Math","round","end","useEffect","useAsyncEffect","a","async","viewFarmBasicInfo","fetched","started","toNumber","desc","Date","now","console","log","arr","index","go","k","Promise","all","map","field","viewRoundSlot","data","timeKey","_roundSlotsReward","BBTC","rewardInfo","rAmount","rAccum","rAccumulateAmount","div","rewardLastSubmiter","rewardAmount","rewardAccumulateAmount","totalStaked","stakedLowestWaterMark","totalStakedInSlot","stakedAddresses","concat","getBTCSTPrice","fetchBtcMiningStat","code","dayList","fetchTotalMinedRTokenInpool","totalSupplyOfSToken","getTotalRemainingSupplyLocked","locked","rtokenContract","getContract","balanceOf","BTCSTFarm","fetchCurrentTotalStakedSTokenInpool","StatInfo","dailyEstimatedUSD","dailyBTCNetreward","dailyBTCNetrewardPerStaked","dailyUSDRewardPerStaked","boostTimes","state","totalValue","loading","totalStoken","totalStokenRemainLocked","loadingDaily","FixedNumber","fromString","mulUnsafe","eachHaveCoin","preHash","hashrate","rate","divUnsafe","subUnsafe","toUnsafeFloat","dailyBtcPerHash","price","calculateDailyReward","btc","usd","Title","textAlign","formatApy","String","EstimateAmountInput","isZero","aboveLine","compare","addUnsafe","RewardRecords","recordItem","RecordItem","RecordList","renderItem","item","key","record","useMemo","sort","t1","t2","Loading","paddingVertical","caption","numberOfLines","marginLeft","FlatList","keyExtractor","toString","ItemSeparatorComponent","EmptyList","margin","formatTimeKey2","SHTHistoryScreen","Screen","Container","BackgroundImage","Content"],"mappings":"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","file":"static/js/8.909d053a.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"decimal-pad\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, ReactNode, useState } from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Heading from \"./Heading\";\n\nexport interface ExpandableProps {\n    title: string;\n    expanded: boolean;\n    onExpand?: () => void;\n    style?: ViewStyle;\n    children?: ReactNode;\n}\n\nconst Expandable: FC<ExpandableProps> = props => {\n    const t = useTranslation();\n    const [expanded, setExpanded] = useState(true);\n    const shouldExpand = props.expanded && expanded;\n    const buttonText = shouldExpand ? undefined : t(\"change\");\n    const onPress = () => {\n        setExpanded(true);\n        props.onExpand?.();\n    };\n\n    return (\n        <View style={props.style}>\n            <Heading text={props.title} buttonText={buttonText} onPressButton={onPress} />\n            <View style={{ display: shouldExpand ? \"flex\" : \"none\" }}>{props.children}</View>\n        </View>\n    );\n};\n\nexport default Expandable;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { BigNumber, ethers, FixedNumber } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { _roundSlotsReward,getBTCSTPrice, viewFarmBasicInfo,viewRoundSlot,fetchBtcMiningStat,getTotalRemainingSupplyLocked,viewUserInfo,totalSupplyOfSToken,fetchTotalMinedRTokenInpool, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport Token from \"../types/Token\";\nexport const BATCH_LOAD_RECORD_LIMIT = 5;\nconst RAMOUNT_DIVIDER = BigNumber.from(1e8).pow(BigNumber.from(4));\nexport interface MiningStat{\n    time:number,\n    price:FixedNumber,\n    eachHaveCoin:FixedNumber,\n    eachHaveUsdt:FixedNumber,\n    eachHaveCny:FixedNumber\n}\n\nexport interface FarmInfo{\n    started: number;\n    stakePeriod: number;\n    desc: string|undefined;\n}\n\nexport interface DailyRecord{\n    rewardLastSubmiter:string;\n    rewardAmount:BigNumber;\n    rewardAccumulateAmount:BigNumber;\n    totalStaked:BigNumber;\n    stakedLowestWaterMark:BigNumber;\n    totalStakedInSlot:BigNumber;\n    stakedAddresses:string[];\n    timeKey:number;\n}\n\nexport interface HistoryState {\n    totalMinedBTC:ethers.BigNumber;\n    loadingTotalMined:boolean;\n    \n    btcInpool:ethers.BigNumber;\n    loadingBTCInpool:boolean;\n\n    totalStokenSupply:ethers.BigNumber;\n    loadingTotalStokenSupply:boolean;\n\n    totalStokenLocked:ethers.BigNumber;\n    loadingTotalStokenLocked:boolean;\n\n    totalStakedBTCST:ethers.BigNumber;\n    loadingTotalStaked:boolean;\n\n    estimatedBTCPerToken:ethers.BigNumber;\n    loadingEstimatedBTC:boolean;\n\n\n    yourMiningPower:ethers.BigNumber;\n    loadingYourMiningPower:boolean;\n\n    dayMiningList:MiningStat[];\n    hourMiningList:MiningStat[]\n    loadingMiningStatList:boolean;\n\n    amount: string;\n    setAmount: (amount: string) => void;\n\n    stoken?: Token;\n\n    loadingDailyRecord:boolean;\n    selectedRecord?:DailyRecord;\n    setSelectedRecord:(record?:DailyRecord)=>void;\n    records?:DailyRecord[];\n\n    farmInfo?:FarmInfo;\n    recordLastLoadTime:number|undefined;\n\n    alreadyLoadedTime:number|undefined;\n\n    getPriceLoading: boolean;\n    btcstPrice: number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useHistoryState = () => {\n    const { provider, signer, address } = useContext(EthersContext);\n\n    const [totalMinedBTC,setTotalMinedBTC] = useState<ethers.BigNumber>();\n    const [loadingTotalMined,setLoadingTotalMined] = useState(true);\n\n    const [totalStokenSupply,setTotalStokenSupply] = useState<ethers.BigNumber>();\n    const [loadingTotalStokenSupply,setLoadingTotalStokenSupply] = useState(true);\n\n    const [totalStokenLocked,settotalStokenLocked] = useState<ethers.BigNumber>();\n    const [loadingTotalStokenLocked,setLoadingTotalStokenLocked] = useState(true);\n\n    const [totalStakedBTCST,setTotalStakedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalStaked,setLoadingTotalStaked] = useState(true);\n    \n    const [btcInpool,setBtcInpool] = useState<ethers.BigNumber>();\n    const [loadingBTCInpool,setloadingBTCInpool] = useState(true);\n\n    const [yourMiningPower,setYourMiningPower] = useState<ethers.BigNumber>();\n    const [loadingYourMiningPower,setLoadingYourMiningPower] = useState(true);\n    const [loadingMiningStatList,setLoadingMiningStatList] = useState(true);\n    \n    const [dayMiningList,setDayMiningList] = useState<MiningStat[]>();\n    const [amount, setAmount] = useState(\"\");\n    const [stoken,setSToken] = useState<Token>();\n    const [records,setRecords] = useState<DailyRecord[]>();\n    const [selectedRecord,setSelectedRecord] =useState<DailyRecord>();\n    const [loadingDailyRecord,setLoadingDailyRecord] = useState(true);\n    const [farmInfo,setFarmInfo] = useState<FarmInfo>();\n    const [recordLastLoadTime,setRecordLastLoadTime] = useState<number>();\n    const [alreadyLoadedTime,setAlreadyLoadedTime] = useState<number>();\n    const [getPriceLoading, setGetPriceLoading] = useState<boolean>(false);\n    const [btcstPrice, setBtcstPrice] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 17,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n    function getTimeKey(time,baseTime,stakePeriod){\n        if (time<baseTime){\n            throw new Error(\"time < farm started time\");\n        }\n        let passed = Math.round(time-baseTime);\n        let round = Math.round(passed/stakePeriod);\n        let end = baseTime+round*stakePeriod;\n        if (end<time){\n            return end+stakePeriod;\n        }\n        return end;\n    }\n    useEffect(() => {\n        setSToken(sToken);\n        setTotalMinedBTC(undefined);\n        setLoadingTotalMined(true);\n        setBtcInpool(undefined);\n        setloadingBTCInpool(true);\n        setYourMiningPower(undefined);\n        setLoadingYourMiningPower(true);\n        setLoadingTotalStokenSupply(true);\n        setLoadingTotalStokenLocked(true);\n        setLoadingTotalStaked(true);\n        setLoadingMiningStatList(true);\n        setAmount(\"\");\n        setLoadingDailyRecord(true);\n        setFarmInfo(undefined);\n        setRecordLastLoadTime(undefined);\n    }, [address]);\n\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            try{\n                const fetched = await viewFarmBasicInfo(provider);\n                setFarmInfo({started:fetched.started.toNumber(),stakePeriod:fetched.stakePeriod.toNumber(),desc:fetched.desc});\n                setRecordLastLoadTime(getTimeKey(Date.now()/1000,fetched.started,fetched.stakePeriod));\n            }finally{\n\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && farmInfo &&recordLastLoadTime) {\n            setLoadingDailyRecord(true);\n            console.log(\"farminfo\",farmInfo);\n            try{\n                let arr:number[] = [];\n                let now = Date.now()/1000;\n                if (alreadyLoadedTime && alreadyLoadedTime<now && alreadyLoadedTime>farmInfo.started){\n                    now = alreadyLoadedTime - farmInfo.stakePeriod;\n                }\n                for (let index = 0; index < BATCH_LOAD_RECORD_LIMIT; index++) {\n                    let go = now-index*farmInfo.stakePeriod;\n                    if (go<=farmInfo.started){\n                        break;;\n                    }\n                    let k = getTimeKey(go,farmInfo.started,farmInfo.stakePeriod);\n                    arr.push(k);\n                }\n                let data = await Promise.all(\n                    arr.map(field => {\n                        try {\n                            return viewRoundSlot(field,provider);\n                        } catch (e) {\n                            return \"\";\n                        }\n                    })\n                );\n                for (let index = 0; index < arr.length; index++) {\n                    data[index] = Object.assign({},data[index],{timeKey:arr[index]});\n                    let rewardInfo = await _roundSlotsReward(arr[index],BBTC,provider);\n                    \n                    let rAmount = rewardInfo.rAmount;\n                    let rAccum = rewardInfo.rAccumulateAmount;\n                    if (rewardInfo.rAmount){\n                        rAmount = rewardInfo.rAmount.div(RAMOUNT_DIVIDER);\n                    }\n                    if (rewardInfo.rAccumulateAmount){\n                        rAccum = rewardInfo.rAccumulateAmount.div(RAMOUNT_DIVIDER);\n                    }\n                    data[index] = {\n                        rewardLastSubmiter:data[index]['rewardLastSubmiter'],\n                        rewardAmount:rAmount,\n                        rewardAccumulateAmount:rAccum,\n                        totalStaked:data[index]['totalStaked'],\n                        stakedLowestWaterMark:data[index]['stakedLowestWaterMark'],\n                        totalStakedInSlot:data[index]['totalStakedInSlot'],\n                        stakedAddresses:data[index]['stakedAddresses'],\n                        timeKey:arr[index]\n                    } as DailyRecord;\n                }\n                if (records && records.length>0){\n                    data = records.concat(data);\n                }\n                if (arr.length>0){\n                    setAlreadyLoadedTime(arr[arr.length-1]);\n                }\n                setRecords(data);\n            }catch(e){\n                console.log(e);    \n            }finally{\n                setLoadingDailyRecord(false);\n            }\n        }\n\n    },[provider,signer,farmInfo,recordLastLoadTime]);\n\n    useAsyncEffect(async () => {\n        setGetPriceLoading(true);\n        try{\n            const btcstPrice = await getBTCSTPrice();\n            setBtcstPrice(btcstPrice);\n        } finally {\n            setGetPriceLoading(false);\n        }\n    }, [])\n\n\n    useAsyncEffect(async()=>{\n        setLoadingMiningStatList(true);\n        if (provider && signer) {\n            try{\n                // let tmp = JSON.parse('[{\"time\": 1609027200000,\"price\": \"26493.40\",\"eachHaveCoin\": \"0.00000740\",\"eachHaveUsdt\": \"0.19243450\",\"eachHaveCny\": \"1.25886801\"}]');\n                // setDayMiningList(tmp);\n                const fetched = await fetchBtcMiningStat();\n                if (fetched.code ==0 && fetched.dayList){\n                    setDayMiningList(fetched.dayList);\n                }\n            }finally{\n                setLoadingMiningStatList(false);\n            }\n        }\n    },[provider,signer]);\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalMined(true);\n            const fetched = await fetchTotalMinedRTokenInpool(provider);\n            try{\n                setTotalMinedBTC(await fetched);\n            }finally{\n                setLoadingTotalMined(false);\n            }\n        }\n    },[provider,signer]);\n    //load total supply of stoken\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalStokenSupply(true);\n            setLoadingTotalStokenLocked(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            const locked = await getTotalRemainingSupplyLocked(provider);\n            try{\n                setTotalStokenSupply(await fetched);\n                settotalStokenLocked(await locked);\n            }finally{\n                setLoadingTotalStokenSupply(false);\n                setLoadingTotalStokenLocked(false);\n            }\n        }\n    },[provider,signer]);\n\n   //load daily records\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            setLoadingTotalStokenSupply(true);\n            setLoadingTotalStokenLocked(true);\n            const fetched = await totalSupplyOfSToken(provider);\n            const locked = await getTotalRemainingSupplyLocked(provider);\n            try{\n                setTotalStokenSupply(await fetched);\n                settotalStokenLocked(await locked);\n            }finally{\n                setLoadingTotalStokenSupply(false);\n                setLoadingTotalStokenLocked(false);\n            }\n        }\n    },[provider,signer]);\n\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingBTCInpool(true);\n            try{\n                const rtokenContract = getContract(\"ERC20\", BBTC, signer);\n                setBtcInpool(await rtokenContract.balanceOf(BTCSTFarm)); \n            }finally{\n                setloadingBTCInpool(false);\n            }\n        }\n    },[provider,signer]);    \n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingTotalStaked(true);\n            const fetched = await fetchCurrentTotalStakedSTokenInpool(provider);\n            try{\n                setTotalStakedBTCST(await fetched);\n            }finally{\n                setLoadingTotalStaked(false);\n            }\n        }\n    },[provider,signer]);\n    return {\n        totalMinedBTC,\n        loadingTotalMined,\n        btcInpool,\n        loadingBTCInpool,\n        totalStokenSupply,\n        loadingTotalStokenSupply,\n        totalStokenLocked,\n        loadingTotalStokenLocked,\n        totalStakedBTCST,\n        loadingTotalStaked,\n        dayMiningList,\n        loadingMiningStatList,\n        yourMiningPower,\n        loadingYourMiningPower,\n        stoken,\n        amount,\n        setAmount,\n        loadingDailyRecord,\n        selectedRecord,\n        setSelectedRecord,\n        records,\n        btcstPrice,\n        getPriceLoading,\n    };\n};\n\nexport default useHistoryState;\n","import React, { FC, useCallback, useContext, useEffect, useMemo } from \"react\";\nimport { FlatList, Platform, View } from \"react-native\";\n\nimport moment from \"moment\";\nimport useAsyncEffect from \"use-async-effect\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport FlexView from \"../components/FlexView\";\nimport InfoBox from \"../components/InfoBox\";\nimport Heading from \"../components/Heading\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Loading from \"../components/Loading\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenAmount from \"../components/TokenAmount\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport TokenSymbol from \"../components/TokenSymbol\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useColors from \"../hooks/useColors\";\nimport useMyLimitOrdersState, { MyLimitOrdersState } from \"../hooks/useMyLimitOrdersState\";\nimport { Order } from \"../hooks/useSettlement\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Screen from \"./Screen\";\nimport useHistoryState, { DailyRecord, HistoryState } from \"../hooks/useHistoryState\";\nimport { BigNumber, FixedNumber } from \"ethers\";\nimport TokenInput from \"../components/TokenInput\";\nimport Border from \"../components/Border\";\nimport { formatUSD, formatBalance, formatTimeKey2, formatPercentage, calculateDailyReward, formatApy } from \"../utils\";\ninterface DailyRecordProp{\n    record:DailyRecord;\n\n}\nconst DISTRIBUTE_LINE = \"0.6\";\n\nconst SHTHistoryScreen = () => {\n    const t = useTranslation();\n    const state = useHistoryState();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"farm-stats\")} />\n                    <Text light={true}>{t(\"pool-history-desc\")}</Text>\n                    <StatInfo state={state}/>                    \n                    <EstimateAmountInput state={state}/>\n                    {/* <Border style={{marginBottom:0}}/> */}\n                    <RewardRecords />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n        </Screen>\n    );\n};\n\nconst StatInfo = ({state}:{state:HistoryState})=>{\n    const t = useTranslation();\n    const disabled = false;\n    const expiry = false;\n    \n    const totalValue = state.totalMinedBTC;\n    const loading = state.loadingTotalMined;\n    const totalStoken = state.totalStokenSupply;\n    const totalStokenRemainLocked = state.totalStokenLocked;\n    const totalStaked = state.totalStakedBTCST;\n    const btcInpool = state.btcInpool;\n    const loadingDaily = state.loadingMiningStatList ||state.loadingTotalStaked || state.getPriceLoading;\n    const stoken = state.stoken;\n    // console.log(\"setLoadingMiningStatList\"+loadingDaily);\n    // console.log(formatBalance(totalStaked.div(BigNumber.from(10)),18,8));\n\n    const dailyEstimated = loadingDaily||totalStaked==undefined?undefined:\n            FixedNumber.fromString(formatBalance(totalStaked.div(BigNumber.from(10)),18,8)+\"\")\n                .mulUnsafe(FixedNumber.from(state.dayMiningList[0].eachHaveCoin));\n    let dailyEstimatedUSD ;  \n    let dailyBTCNetreward;  \n    let dailyBTCNetrewardPerStaked;\n    let dailyUSDRewardPerStaked;\n    let boostTimes;\n    if (dailyEstimated!=undefined && totalStoken!=undefined && totalStaked!=undefined){\n        let aboveLine = true;\n        let preHash = FixedNumber.fromString(formatBalance(totalStaked.div(BigNumber.from(10)),18,8)+\"\");\n        let hashrate = preHash;\n        let compare = FixedNumber.from(totalStaked);\n        let rate = compare.divUnsafe(FixedNumber.from(totalStoken))\n                .subUnsafe(FixedNumber.from(DISTRIBUTE_LINE));\n        boostTimes = FixedNumber.from(\"1.0\");        \n        if (rate.toUnsafeFloat()<0){\n            hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n                FixedNumber.fromString(formatBalance(totalStoken.div(BigNumber.from(10)),18,8)+\"\")\n            );\n            aboveLine = false;\n            boostTimes = hashrate.divUnsafe(preHash);\n        }\n\n        const dailyBtcPerHash = FixedNumber.from(state.dayMiningList[0].eachHaveCoin);\n        const price = FixedNumber.from(state.dayMiningList[0].price);\n        console.log(\"calculate netreward using pric:\"+price+\" daily btc per TH:\"+dailyBtcPerHash+\" hashrate:\"+hashrate);\n        let {btc ,usd} = calculateDailyReward(hashrate,dailyBtcPerHash,price);\n        dailyBTCNetreward= btc;\n        dailyEstimatedUSD= usd;\n\n        dailyBTCNetrewardPerStaked = dailyBTCNetreward.divUnsafe(preHash).divUnsafe(FixedNumber.from(10));\n        dailyUSDRewardPerStaked = dailyEstimatedUSD.divUnsafe(preHash).divUnsafe(FixedNumber.from(10));\n    }\n    return (\n        <InfoBox>\n            <Title text={t(\"total-mined\")} style={{ flex: 1, fontSize: 28, textAlign: \"center\" }} />\n            <Title\n                text={loading || totalValue == undefined ? t(\"fetching\") : formatBalance(totalValue, 18, 8)}\n                fontWeight={\"light\"}\n                disabled={loading}\n                style={{ fontSize: IS_DESKTOP ? 32 : 24, textAlign: \"center\" }}\n            />\n            <Meta\n                label={t(\"total-btc-still-in-pool\")}\n                text={\n                    state.loadingBTCInpool || totalStoken == undefined ? t(\"fetching\") : formatBalance(btcInpool, 18, 8)\n                }\n                suffix={\"\"}\n                disabled={state.loadingBTCInpool}\n            />\n\n            <Meta\n                label={t(\"stoken-total-supply\")}\n                text={\n                    state.loadingTotalStokenSupply || totalStoken == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(totalStoken,stoken?.decimals, 2)\n                }\n                suffix={\"\"}\n                disabled={state.loadingTotalStokenSupply}\n            />\n            <Meta\n                label={t(\"stoken-total-locked\")}\n                text={\n                    state.loadingTotalStokenLocked || totalStoken == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(totalStokenRemainLocked, stoken?.decimals, 2)\n                }\n                suffix={\"\"}\n                disabled={state.loadingTotalStokenLocked}\n            />\n            <Meta\n                label={t(\"total-staked-btcst\")}\n                text={\n                    state.loadingTotalStaked || totalStaked == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(totalStaked, stoken?.decimals, 2)\n                }\n                suffix={\n                    state.loadingTotalStaked || totalStaked == undefined\n                        ? \"\"\n                        : \"=\" + formatBalance(totalStaked.div(BigNumber.from(10)), 18, 2) + \" TH/s\"\n                }\n                disabled={state.loadingTotalStaked}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward\")}\n                text={\n                    loadingDaily || dailyBTCNetreward == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(dailyBTCNetreward, 18, 8) + \" BTC\"\n                }\n                suffix={\n                    loadingDaily || dailyEstimatedUSD == undefined\n                        ? t(\"fetching\")\n                        : \" ≈ \" + \"$ \" + formatBalance(dailyEstimatedUSD, 18, 2)\n                }\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-boost\")}\n                text={loadingDaily || boostTimes == undefined ? t(\"fetching\") : formatBalance(boostTimes, 18, 2) + \" X\"}\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward-per-token-btc\")}\n                text={\n                    loadingDaily || dailyBTCNetrewardPerStaked == undefined\n                        ? t(\"fetching\")\n                        : formatBalance(dailyBTCNetrewardPerStaked, 19, 8) + \" BTC\"\n                }\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"current-eta-daily-reward-per-token-usd\")}\n                text={\n                    loadingDaily || dailyUSDRewardPerStaked == undefined\n                        ? t(\"fetching\")\n                        : \"$ \" + formatBalance(dailyUSDRewardPerStaked, 19, 4)\n                }\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n            <Meta\n                label={t(\"apy\")}\n                text={\n                    loadingDaily || dailyUSDRewardPerStaked == undefined\n                        ? t(\"fetching\")\n                        : state.btcstPrice === 0\n                        ? \"-\"\n                        : formatApy(dailyUSDRewardPerStaked, FixedNumber.fromString(String(state.btcstPrice))) + '%'\n                }\n                suffix={\"\"}\n                disabled={loadingDaily}\n            />\n        </InfoBox>\n    );\n};\n\nconst EstimateAmountInput = ({ state }: { state: HistoryState }) => {\n    const t = useTranslation();\n    const totalStoken = state.totalStokenSupply;\n    const totalStaked = state.totalStakedBTCST;\n    const disabled = (state.amount==undefined || state.amount==\"\" || FixedNumber.from(state.amount).isZero() \n    || state.loadingMiningStatList);\n    let dailyEstimatedUSD ;  \n    let dailyBTCNetreward; \n    let dailyBTCNetrewardPerStaked;\n    let dailyUSDRewardPerStaked;\n    let boostTimes;\n    if (!disabled && totalStoken!=undefined && totalStaked!=undefined){\n        let hashrate = FixedNumber.fromString(state.amount).divUnsafe(FixedNumber.from(10));\n        let aboveLine = true;\n        let compare = FixedNumber.from(formatBalance(totalStaked,18,8)+\"\").addUnsafe(FixedNumber.from(state.amount));\n        let rate = compare.divUnsafe(FixedNumber.from( formatBalance(totalStoken,18,8)+\"\")\n                ).subUnsafe(FixedNumber.from(DISTRIBUTE_LINE));\n        boostTimes = FixedNumber.from(\"1.0\");\n        if (rate.toUnsafeFloat()<0){\n            hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n                FixedNumber.fromString(formatBalance(totalStoken.div(BigNumber.from(10)),18,8)+\"\")\n            );\n            aboveLine = false;\n            console.log(\"compare:\"+compare+\" hashrate:\"+hashrate);\n            boostTimes = hashrate.mulUnsafe(FixedNumber.from(10)).divUnsafe(compare);\n        }\n\n        const dailyBtcPerHash = FixedNumber.from(state.dayMiningList[0].eachHaveCoin);\n        const price = FixedNumber.from(state.dayMiningList[0].price);\n        let {btc ,usd} = calculateDailyReward(hashrate,dailyBtcPerHash,price);\n        \n        if (aboveLine){\n            dailyBTCNetreward= btc;\n            dailyEstimatedUSD= usd;\n        }else{\n            dailyBTCNetreward = btc.divUnsafe(compare)\n                .mulUnsafe(FixedNumber.from(state.amount));\n            dailyEstimatedUSD = usd.divUnsafe(compare)\n                .mulUnsafe(FixedNumber.from(state.amount));\n        }\n        \n    }\n    \n    return (\n        <View style={{marginTop:Spacing.large}}>\n            <Heading text={t(\"stake-amount-to-estimates\")} style={{marginBottom:0}} />\n            <Text light={true} style={{marginTop:0,marginBottom:Spacing.tiny}}>{t(\"estimate-desc\")}</Text>\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n            <InfoBox style={{marginTop:Spacing.tiny}}>\n                <Meta \n                    label={t(\"estimated-reward-in-btc\")} \n                    text={disabled?t(\"n/a\"):formatBalance(dailyBTCNetreward,19,8)}\n                    suffix={\"BTC\"}\n                    disabled={disabled} />\n                <Meta\n                    label={t(\"estimated-reward-in-usd\")}\n                    text={disabled?t(\"n/a\"):formatBalance(dailyEstimatedUSD,19,4)}\n                    suffix={\"USD\"}\n                    disabled={disabled}\n                />\n                <Meta\n                    label={t(\"estimated-boost-times\")}\n                    text={disabled?t(\"n/a\"):formatBalance(boostTimes,18,2)}\n                    suffix={\"X\"}\n                    disabled={disabled}\n                />\n            </InfoBox>\n        </View>\n    );\n};\n\nconst RewardRecords = () => {\n    const state = useHistoryState();\n    const t = useTranslation();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <Expandable\n                title={t(\"pool-daily-mined-history\")}\n                expanded={true}\n                onExpand={()=>{}}>\n                <RecordList loadingDailyRecord={state.loadingDailyRecord} \n                records={state.records}\n                recordItem={RecordItem}\n            />\n            </Expandable>\n            \n            {/* <OrderInfo state={state} /> */}\n        </View>\n    );\n};\n\nconst RecordList = (props: {\n    loadingDailyRecord: boolean;\n    records?: DailyRecord[];\n    recordItem: FC<DailyRecordProp>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.timeKey} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>(props.records || [])\n                // @ts-ignore\n                .sort((t1, t2) => (t2.timeKey || 0) - (t1.timeKey || 0)),\n        [props.records]\n    );\n    return props.loadingDailyRecord || !props.records ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex:1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {t(\"deposited-rewards\")}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"staked-btcsts\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                {/* <ExternalIcon path={\"/all\"} /> */}\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.timeKey.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"empty-staking-records\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: DailyRecordProp) => {\n    const record = props.record;\n    const rewardAmount = record.rewardAmount;\n    const stakedLowestWaterMark = record.stakedLowestWaterMark;\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex:1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={false}>\n                    {rewardAmount.gt(BigNumber.from(0)) ? formatBalance(rewardAmount || 0): \"N/A\"}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={false}>\n                    {stakedLowestWaterMark.gt(BigNumber.from(0)) ? formatBalance(stakedLowestWaterMark || 0,17,1): \"N/A\"}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={false}>\n                    {formatTimeKey2(record.timeKey)}\n                </Text>\n            </View>\n            {/* <ExternalIcon path={\"/slot/\" + record.timeKey} /> */}\n        </FlexView>\n    );\n};\nexport default SHTHistoryScreen;\n"],"sourceRoot":""}